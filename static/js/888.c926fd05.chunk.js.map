{"version":3,"file":"static/js/888.c926fd05.chunk.js","mappings":"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","sources":["components/ui/TagBadge/TagBadge.tsx","components/ui/Container/Container.tsx","components/BadgeContainer/BadgeContainer.tsx","components/ViewsContainer/ViewsContainer.tsx","hooks/useRatePost.ts","components/PostCard/PostCard.tsx","components/UserPosts/UserPosts.tsx"],"sourcesContent":["import { ReactElement } from \"react\";\nimport \"./style.scss\";\n\ntype TTagBadgeProps = {\n  children: string;\n  slug: string;\n  disabled?: boolean\n  action: (slug: string) => void;\n  tagStore: string[]\n};\n\nexport const TagBadge = ({\n  children,\n  slug,\n  action,\n  disabled = false, \n  tagStore\n}: TTagBadgeProps): ReactElement => {\n  return (\n    <button\n      className={tagStore.includes(slug) ? \"tag-badge__active\" : \"tag-badge\"}\n      disabled={disabled}\n      onClick={() => {\n        action(slug);\n      }}\n    >\n      <p>{children}</p>\n    </button>\n  );\n};\n","import { PropsWithChildren, ReactElement } from \"react\";\n\nexport const Container = ({ children }: PropsWithChildren): ReactElement => {\n  return <div className=\"container\">{children}</div>;\n};\n","import { ReactElement } from \"react\";\nimport { TagBadge } from \"@ui/TagBadge\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"@/store\";\nimport { fetchPostsByTag } from \"@/store/posts.api\";\nimport \"./style.scss\";\n\ntype TBadgeContainerProps = {\n  tags: string[];\n  tagsStore: string[];\n};\n\nexport const BadgeContainer: React.FC<TBadgeContainerProps> = ({\n  tags,\n  tagsStore,\n}): ReactElement => {\n  const dispatch = useDispatch<AppDispatch>();\n  const sortByTag = (slug: string) => {\n    dispatch(fetchPostsByTag(slug));\n  };\n  return (\n    <div className=\"badge-container\">\n      {tags.map((tag, index) => (\n        <TagBadge key={index} slug={tag} action={sortByTag} tagStore={tagsStore}>\n          {tag}\n        </TagBadge>\n      ))}\n    </div>\n  );\n};\n","import { faEye } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { ReactElement } from \"react\";\nimport \"./style.scss\";\n\ntype TViewsContainer = {\n  views: number;\n};\n\nexport const ViewsContainer: React.FC<TViewsContainer> = ({\n  views,\n}): ReactElement => {\n  return (\n    <div className=\"view-container\">\n      <div className=\"view-container__icon\">\n        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>\n      </div>\n      <div className=\"view-container__counter\">\n        <p>{views}</p>\n      </div>\n    </div>\n  );\n};\n","import { getUpdatedPost } from \"@/store/posts.api\";\nimport { ratePost, ratePagedPost } from \"@/store/slices/PostsSlices\";\nimport { TPost } from \"@/types/types\";\nimport { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\ninterface UseRatePostProps {\n  post: TPost;\n  getPost: <T>(endpoint: string) => Promise<T | undefined>;\n  patchPost: <T>(endpoint: string, data: any) => Promise<T | undefined>;\n}\n\nexport const useRatePost = ({ post, getPost, patchPost }: UseRatePostProps) => {\n  const dispatch = useDispatch();\n  const ratePostAsync = useCallback(\n    async (newRate: string | object) => {\n      const { rated, rate } = post;\n      const updatingPost = await getPost<TPost>(`posts/${post.id}`);\n      const basePostData = {\n        ...updatingPost,\n        user: post.user,\n        postImage: post.postImage\n      };\n      const updatePostReactions = async () => {\n        const updatedPost = getUpdatedPost(post.id);\n        await patchPost<TPost>(`posts/${post.id}`, {\n          reactions: updatedPost?.reactions,\n        });\n      };\n      if (rated && rate === newRate) {\n        dispatch(ratePost({ post: basePostData }));\n        await updatePostReactions();\n      } else if (rated && rate !== newRate) {\n        dispatch(\n          ratePost({\n            post: basePostData,\n            reaction: newRate,\n          })\n        );\n        await updatePostReactions();\n      } else {\n        dispatch(\n          ratePost({\n            post: basePostData,\n            reaction: newRate,\n          })\n        );\n        await updatePostReactions();\n      }\n    },\n    [post, dispatch, getPost, patchPost]\n  );\n\n  const ratePagedPostAsync = useCallback(\n    async (newRate: string | object) => {\n      const { rated, rate } = post;\n      const updatingPost = await getPost<TPost>(`posts/${post.id}`);\n      const basePostData = {\n        ...updatingPost,\n        user: post.user,\n        postImage: post.postImage\n      };\n      const updatePostReactions = async () => {\n        const updatedPost = getUpdatedPost(post.id);\n        await patchPost<TPost>(`posts/${post.id}`, {\n          reactions: updatedPost?.reactions,\n        });\n      };\n      if (rated && rate === newRate) {\n        dispatch(ratePagedPost({ post: basePostData }));\n        await updatePostReactions();\n      } else if (rated && rate !== newRate) {\n        dispatch(\n          ratePagedPost({\n            post: basePostData,\n            reaction: newRate,\n          })\n        );\n        await updatePostReactions();\n      } else {\n        dispatch(\n          ratePagedPost({\n            post: basePostData,\n            reaction: newRate,\n          })\n        );\n        await updatePostReactions();\n      }\n    },\n    [post, dispatch, getPost, patchPost]\n  );\n  return { ratePost: ratePostAsync, ratePagedPost: ratePagedPostAsync };\n};\n","import { TPost, TPostAppStore} from \"@/types/types\";\nimport { ReactElement } from \"react\";\nimport { BadgeContainer } from \"@/components/BadgeContainer\";\nimport { NavLink, useLocation } from \"react-router\";\nimport { Container } from \"@ui/Container\";\nimport { faThumbsUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { faThumbsDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { Button } from \"@ui/Button\";\nimport { ViewsContainer } from \"../ViewsContainer\";\nimport useFetch from \"@/hooks/useFetch\";\nimport { useRatePost } from \"@/hooks/useRatePost\";\nimport \"./style.scss\";\nimport { useSelector } from \"react-redux\";\n\ntype TPostCardProps = {\n  link: string;\n  post: TPost;\n};\n\nexport const PostCard: React.FC<TPostCardProps> = ({\n  link,\n  post,\n}): ReactElement => {\n  const { pathname } = useLocation();\n  const postId = Number(pathname.split(\"/\").at(-1));\n  const { get, patch } = useFetch(`https://dummyjson.com`);\n  const { tag } = useSelector((state: TPostAppStore) => state.posts);\n  const { id : userId } = useSelector(\n    (state: TPostAppStore) => state.user.data\n  );\n  const { ratePost, ratePagedPost } = useRatePost({\n    post,\n    getPost: get,\n    patchPost: patch,\n  });\n  const ratePostAsync = async (newRate: string | object) => {\n    if (newRate === \"liked\") {\n      await ratePost(\"liked\");\n    } else {\n      await ratePost(\"disliked\");\n    }\n  };\n  const ratePagedPostAsync = async (newRate: string | object) => {\n    if (newRate === \"liked\") {\n      await ratePagedPost(\"liked\");\n    } else {\n      await ratePagedPost(\"disliked\");\n    }\n  };\n  return (\n    <article className=\"post-card\">\n      <div className=\"post-card__header\">\n        {post.user ? (\n          <Container>\n            <img\n              src={post.user.image}\n              alt={post.user.firstName + \" \" + post.user.lastName + \" avatar\"}\n            />\n            <h5>{post.user.firstName + \" \" + post.user.lastName}</h5>\n          </Container>\n        ) : <div></div>}\n        <BadgeContainer tags={post.tags} tagsStore={tag} />\n      </div>\n      <div className=\"post-card__body\">\n        <h2>{post.title}</h2>\n\n        {postId ? (\n          <img src={post.postImage} alt={post.title} />\n        ) : (\n          <NavLink to={link}>\n            <img src={post.postImage} alt={post.title} />\n          </NavLink>\n        )}\n        {postId ? <p>{post.body}</p> : <NavLink to={link}>{post.body}</NavLink>}\n      </div>\n      <div className=\"post-card__footer\">\n        <ViewsContainer views={post.views} />\n        <Container>\n          <Button\n            icon={faThumbsUp}\n            action={!postId ? ratePostAsync : ratePagedPostAsync}\n            payload={\"liked\"}\n            isAuthOnly={true}\n            disabled={post.userId === userId}\n            style={{color:'blue'}}\n          >\n            {post.reactions.likes}\n          </Button>\n          <Button\n            icon={faThumbsDown}\n            action={!postId ? ratePostAsync : ratePagedPostAsync}\n            payload={\"disliked\"}\n            isAuthOnly={true}\n            disabled={post.userId === userId}\n            style={{color:'red'}}\n          >\n            {post.reactions.dislikes}\n          </Button>\n        </Container>\n      </div>\n    </article>\n  );\n};\n","import { TPost, TPostAppStore } from \"@/types/types\";\nimport { ReactElement, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { PostCard } from \"../PostCard\";\nimport { fetchUserPosts } from \"@/store/slices/utils\";\nimport { Loader } from \"../Loader\";\n\nconst UserPosts = (): ReactElement => {\n  const { data, loading } = useSelector((state: TPostAppStore) => state.user);\n  const [userPosts, setUserPosts] = useState<TPost[] | []>();\n  useEffect(() => {\n    if (data.id) {\n      fetchUserPosts(data.id, setUserPosts);\n    }\n  }, [data.id]);\n  return (\n    <div>\n      <h3>My posts:</h3>\n      {loading === \"pending\" && <Loader />}\n      {data &&\n        userPosts &&\n        userPosts?.map((post) => (\n          <PostCard key={post.id} post={post} link={`/posts/${post.id}`} />\n        ))}\n    </div>\n  );\n};\n\nexport default UserPosts;\n"],"names":["TagBadge","_ref","children","slug","action","disabled","tagStore","_jsx","className","includes","onClick","Container","BadgeContainer","tags","tagsStore","dispatch","useDispatch","sortByTag","fetchPostsByTag","map","tag","index","ViewsContainer","views","_jsxs","FontAwesomeIcon","icon","faEye","PostCard","link","post","pathname","useLocation","postId","Number","split","at","get","patch","useFetch","useSelector","state","posts","id","userId","user","data","ratePost","ratePagedPost","getPost","patchPost","useCallback","async","rated","rate","basePostData","postImage","updatePostReactions","updatedPost","getUpdatedPost","reactions","newRate","reaction","useRatePost","ratePostAsync","ratePagedPostAsync","src","image","alt","firstName","lastName","title","NavLink","to","body","Button","faThumbsUp","payload","isAuthOnly","style","color","likes","faThumbsDown","dislikes","UserPosts","loading","userPosts","setUserPosts","useState","useEffect","fetchUserPosts","Loader"],"sourceRoot":""}