{"version":3,"file":"static/js/594.84b2330a.chunk.js","mappings":"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","sources":["components/ui/TagBadge/TagBadge.tsx","components/ui/Container/Container.tsx","components/ProtectedComponent/ProtectedComponent.tsx","components/SearchBox/SearchBox.tsx","hooks/useDebounce.ts","components/ui/Select/Select.tsx","components/SortBox/SortBox.tsx","components/TagsBox/TagsBox.tsx","components/PostsFilter/PostsFilter.tsx","components/PostInput/PostInput.tsx","components/PostsList/PostsList.tsx","routes/PostsListRoute.tsx","components/BadgeContainer/BadgeContainer.tsx","components/ViewsContainer/ViewsContainer.tsx","hooks/useRatePost.ts","components/PostCard/PostCard.tsx","components/Post/Post.tsx","components/ui/TextArea/TextArea.tsx"],"sourcesContent":["import { ReactElement } from \"react\";\r\nimport \"./style.scss\";\r\n\r\ntype TTagBadgeProps = {\r\n  children: string;\r\n  slug: string;\r\n  disabled?: boolean\r\n  action: (slug: string) => void;\r\n  tagStore: string[]\r\n};\r\n\r\nexport const TagBadge = ({\r\n  children,\r\n  slug,\r\n  action,\r\n  disabled = false, \r\n  tagStore\r\n}: TTagBadgeProps): ReactElement => {\r\n  return (\r\n    <button\r\n      className={tagStore.includes(slug) ? \"tag-badge__active\" : \"tag-badge\"}\r\n      disabled={disabled}\r\n      onClick={() => {\r\n        action(slug);\r\n      }}\r\n    >\r\n      <p>{children}</p>\r\n    </button>\r\n  );\r\n};\r\n","import { PropsWithChildren, ReactElement } from \"react\";\r\n\r\nexport const Container = ({ children }: PropsWithChildren): ReactElement => {\r\n  return <div className=\"container\">{children}</div>;\r\n};\r\n","import { useCheckToken } from \"@/hooks/useCheckToken\";\r\nimport { PropsWithChildren, ReactElement } from \"react\";\r\n\r\nexport const ProtectedComponent = ({\r\n  children,\r\n}: PropsWithChildren): ReactElement => {\r\n  const { isLogged } = useCheckToken();\r\n  if (isLogged) {\r\n    return <>{children}</>;\r\n  } else {\r\n    return <div></div>;\r\n  }\r\n};\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport useDebounce from \"@hooks/useDebounce\";\r\nimport { ReactElement, useEffect, useState } from \"react\";\r\nimport { fetchSearchedPosts } from \"@/store/posts.api\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AppDispatch } from \"@/store\";\r\nimport { Input } from \"@ui/Input\";\r\n\r\nexport const SearchBox = (): ReactElement => {\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const debouncedString = useDebounce(searchQuery, 500);\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  useEffect(() => {\r\n    if (searchQuery) {\r\n      dispatch(fetchSearchedPosts(searchQuery));\r\n    }\r\n  }, [debouncedString]);\r\n  return (\r\n    <div>\r\n      <Input type=\"text\" value={searchQuery} setValue={setSearchQuery} label=\"Search post...\" name=\"search-query\" />\r\n    </div>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useDebounce(value: string, delay: number) : string {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [delay, value]);\r\n\r\n  return debouncedValue;\r\n}\r\n","import { ReactElement } from \"react\";\r\nimport \"./style.scss\";\r\n\r\ntype TSelectProps = {\r\n  options: string[];\r\n  defaultValue: string,\r\n  setValue: (value: string) => void;\r\n};\r\n\r\nexport const Select: React.FC<TSelectProps> = ({\r\n  defaultValue,\r\n  options,\r\n  setValue,\r\n}): ReactElement => {\r\n  return (\r\n    <select \r\n      className=\"custom-select\"\r\n      defaultValue={defaultValue} \r\n      onChange={(e) => setValue(e.target.value)}\r\n    >\r\n      <option disabled className=\"custom-select-default-option\">{defaultValue}</option>\r\n      {options.map((option, index) => (\r\n        <option key={index} className=\"custom-select-option\">{option}</option>\r\n      ))}\r\n    </select>\r\n  );\r\n};","import { ReactElement, useEffect, useState } from \"react\";\r\nimport { Select } from \"@ui/Select\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AppDispatch } from \"@/store\";\r\nimport { sort } from \"@/store/slices/PostsSlice\";\r\nimport \"./style.scss\";\r\n\r\nexport const SortBox = (): ReactElement => {\r\n  const [sortBy, setSortBy] = useState(\"\");\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  useEffect(() => {\r\n    dispatch(sort(sortBy));\r\n  }, [sortBy, dispatch]);\r\n  return (\r\n    <div>\r\n      <Select\r\n        options={[\"Likes\", \"Dislikes\", \"Views\"]}\r\n        defaultValue=\"------\"\r\n        setValue={setSortBy}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { ReactElement } from \"react\";\r\nimport { TPostAppStore } from \"@/types/types\";\r\nimport { TagBadge } from \"@ui/TagBadge\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./style.scss\";\r\n\r\ninterface TagsBoxProps {\r\n  getSlug: (slug: string) => void;\r\n  tagStore: string[];\r\n}\r\n\r\nexport const TagsBox = ({ getSlug, tagStore }: TagsBoxProps): ReactElement => {\r\n  const { data } = useSelector(\r\n    (state: TPostAppStore) => state.posts.postsTags\r\n  );\r\n  return (\r\n    <>\r\n      {data && (\r\n        <div className=\"tag-box\">\r\n          {\" \"}\r\n          {data.map((tag) => (\r\n            <TagBadge\r\n              key={tag.slug}\r\n              slug={tag.slug}\r\n              action={getSlug}\r\n              tagStore={tagStore}\r\n            >\r\n              {tag.name}\r\n            </TagBadge>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n","import { ReactElement } from \"react\";\r\nimport { SearchBox } from \"@components/SearchBox\";\r\nimport { SortBox } from \"@components/SortBox\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch } from \"@/store\";\r\nimport { fetchPostsByTag } from \"@/store/posts.api\";\r\nimport { TPostAppStore } from \"@/types/types\";\r\nimport { TagsBox } from \"@components/TagsBox\";\r\nimport './style.scss'\r\n\r\nexport const PostsFilter = (): ReactElement => {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const { tag } = useSelector((state: TPostAppStore) => state.posts);\r\n  const handleSlug = (slug: string) => {\r\n    dispatch(fetchPostsByTag(slug));\r\n  };\r\n  return (\r\n    <div className=\"posts-filter\">\r\n      <SearchBox />\r\n      <h4>Sort by:</h4>\r\n      <SortBox />\r\n      <TagsBox getSlug={handleSlug} tagStore={tag} />\r\n    </div>\r\n  );\r\n};\r\n","import { ReactElement, useState } from \"react\";\r\nimport { TextArea } from \"../ui/TextArea\";\r\nimport { Button } from \"@ui/Button\";\r\nimport { Input } from \"../ui/Input\";\r\nimport {\r\n  faDownLong,\r\n  faPaperPlane,\r\n  faUpLong,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { TagsBox } from \"@components/TagsBox\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { TPost, TPostAppStore } from \"@/types/types\";\r\nimport { fetchImage } from \"@/store/slices/utils\";\r\nimport { AppDispatch } from \"@/store\";\r\nimport { addPost } from \"@/store/slices/PostsSlice\";\r\nimport useFetch from \"@/hooks/useFetch\";\r\nimport \"./style.scss\";\r\nimport { useNotify } from \"@/hooks/useNotify\";\r\n\r\nexport const PostInput = (): ReactElement => {\r\n  const { id, firstName, lastName, image } = useSelector(\r\n    (state: TPostAppStore) => state.user.data\r\n  );\r\n  const [isOpened, setIsOpened] = useState(false);\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const [body, setBody] = useState(\"\");\r\n  const [title, setTitle] = useState(\"\");\r\n  const [tags, setTags] = useState<string[]>([]);\r\n  const { notify, notifyPortal } = useNotify();\r\n  const handleSlug = (slug: string) => {\r\n    setTags([...tags, slug]);\r\n  };\r\n  const { post } = useFetch(`https://dummyjson.com`);\r\n  const addNewPost = async () => {\r\n    const newPost: TPost = {\r\n      id: Math.floor(Math.random() * 20001) + 10000,\r\n      userId: id,\r\n      user: {\r\n        firstName,\r\n        lastName,\r\n        image,\r\n      },\r\n      comments: [],\r\n      rate: \"\",\r\n      postImage: await fetchImage(title),\r\n      rated: false,\r\n      title,\r\n      body,\r\n      tags,\r\n      views: 0,\r\n      reactions: {\r\n        likes: 0,\r\n        dislikes: 0,\r\n      },\r\n    };\r\n    dispatch(addPost(newPost));\r\n    notify('New post added!', 'success')\r\n    await post(\"posts/add\", newPost);\r\n  };\r\n  return (\r\n    <div>\r\n      <Button\r\n        icon={isOpened ? faUpLong : faDownLong}\r\n        style={{ color: \"black\" }}\r\n        action={() => setIsOpened((isOpened) => !isOpened)}\r\n      >\r\n        Write post\r\n      </Button>\r\n      <div className={isOpened ? \"post-input__visible\" : \"post-input\"}>\r\n        <h4>Choose tags:</h4>\r\n        <TagsBox getSlug={handleSlug} tagStore={tags} />\r\n        <Input\r\n          value={title}\r\n          setValue={setTitle}\r\n          type=\"text\"\r\n          label=\"Post title:\"\r\n          name=\"post-title\"\r\n        />\r\n        <TextArea value={body} setValue={setBody} label=\"Post text:\" />\r\n        <Button\r\n          action={addNewPost}\r\n          payload={{ body, title, tags }}\r\n          icon={faPaperPlane}\r\n          style={{ color: \"black\" }}\r\n        >\r\n          Send post\r\n        </Button>\r\n      </div>\r\n      {notifyPortal}\r\n    </div>\r\n  );\r\n};\r\n","import { AppDispatch } from \"@/store\";\r\nimport { fetchPosts, fetchTags } from \"@/store/posts.api\";\r\nimport { TPostAppStore, TPost } from \"@/types/types\";\r\nimport { ReactElement, useEffect, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Post } from \"@components/Post\";\r\nimport { PostInput } from \"@components/PostInput\";\r\nimport { ProtectedComponent } from \"@components/ProtectedComponent\";\r\nimport './style.scss'\r\n\r\nexport const PostsList = (): ReactElement => {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const { data } = useSelector((store: TPostAppStore) => store.posts.postsList);\r\n  const ref = useRef(false);\r\n  useEffect(() => {\r\n    if (ref.current) {\r\n      dispatch(fetchPosts());\r\n      dispatch(fetchTags());\r\n    } else {\r\n      ref.current = true;\r\n    }\r\n  }, [dispatch]);\r\n  return (\r\n    <>\r\n      <ProtectedComponent>\r\n        <PostInput />\r\n      </ProtectedComponent>\r\n      <div className=\"post-list\">\r\n        {data.map((item: TPost) => (\r\n          <Post key={item.id} post={item} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { ReactElement } from \"react\";\r\nimport { PostsFilter } from \"@/components/PostsFilter\";\r\nimport { PostsList } from \"@/components/PostsList\";\r\n\r\nconst PostsListRoute = (): ReactElement => {\r\n  return (\r\n    <main>\r\n      <PostsFilter />\r\n      <PostsList />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default PostsListRoute\r\n","import { ReactElement } from \"react\";\r\nimport { TagBadge } from \"@ui/TagBadge\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AppDispatch } from \"@/store\";\r\nimport { fetchPostsByTag } from \"@/store/posts.api\";\r\nimport \"./style.scss\";\r\n\r\ntype TBadgeContainerProps = {\r\n  tags: string[];\r\n  tagsStore: string[];\r\n};\r\n\r\nexport const BadgeContainer: React.FC<TBadgeContainerProps> = ({\r\n  tags,\r\n  tagsStore,\r\n}): ReactElement => {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const sortByTag = (slug: string) => {\r\n    dispatch(fetchPostsByTag(slug));\r\n  };\r\n  return (\r\n    <div className=\"badge-container\">\r\n      {tags.map((tag, index) => (\r\n        <TagBadge key={index} slug={tag} action={sortByTag} tagStore={tagsStore}>\r\n          {tag}\r\n        </TagBadge>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { faEye } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ReactElement } from \"react\";\r\nimport \"./style.scss\";\r\n\r\ntype TViewsContainer = {\r\n  views: number;\r\n};\r\n\r\nexport const ViewsContainer: React.FC<TViewsContainer> = ({\r\n  views,\r\n}): ReactElement => {\r\n  return (\r\n    <div className=\"view-container\">\r\n      <div className=\"view-container__icon\">\r\n        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>\r\n      </div>\r\n      <div className=\"view-container__counter\">\r\n        <p>{views}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { getUpdatedPost } from \"@/store/posts.api\";\r\nimport { ratePost, ratePagedPost } from \"@/store/slices/PostsSlice\";\r\nimport { TPost } from \"@/types/types\";\r\nimport { useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\ninterface UseRatePostProps {\r\n  post: TPost;\r\n  getPost: <T>(endpoint: string) => Promise<T | undefined>;\r\n  patchPost: <T>(endpoint: string, data: any) => Promise<T | undefined>;\r\n}\r\n\r\nexport const useRatePost = ({ post, getPost, patchPost }: UseRatePostProps) => {\r\n  const dispatch = useDispatch();\r\n  const ratePostAsync = useCallback(\r\n    async (newRate: string | object) => {\r\n      const { rated, rate } = post;\r\n      const updatingPost = await getPost<TPost>(`posts/${post.id}`);\r\n      const basePostData = {\r\n        ...updatingPost,\r\n        user: post.user,\r\n        postImage: post.postImage\r\n      };\r\n      const updatePostReactions = async () => {\r\n        const updatedPost = getUpdatedPost(post.id);\r\n        await patchPost<TPost>(`posts/${post.id}`, {\r\n          reactions: updatedPost?.reactions,\r\n        });\r\n      };\r\n      if (rated && rate === newRate) {\r\n        dispatch(ratePost({ post: basePostData }));\r\n        await updatePostReactions();\r\n      } else if (rated && rate !== newRate) {\r\n        dispatch(\r\n          ratePost({\r\n            post: basePostData,\r\n            reaction: newRate,\r\n          })\r\n        );\r\n        await updatePostReactions();\r\n      } else {\r\n        dispatch(\r\n          ratePost({\r\n            post: basePostData,\r\n            reaction: newRate,\r\n          })\r\n        );\r\n        await updatePostReactions();\r\n      }\r\n    },\r\n    [post, dispatch, getPost, patchPost]\r\n  );\r\n\r\n  const ratePagedPostAsync = useCallback(\r\n    async (newRate: string | object) => {\r\n      const { rated, rate } = post;\r\n      const updatingPost = await getPost<TPost>(`posts/${post.id}`);\r\n      const basePostData = {\r\n        ...updatingPost,\r\n        user: post.user,\r\n        postImage: post.postImage\r\n      };\r\n      const updatePostReactions = async () => {\r\n        const updatedPost = getUpdatedPost(post.id);\r\n        await patchPost<TPost>(`posts/${post.id}`, {\r\n          reactions: updatedPost?.reactions,\r\n        });\r\n      };\r\n      if (rated && rate === newRate) {\r\n        dispatch(ratePagedPost({ post: basePostData }));\r\n        await updatePostReactions();\r\n      } else if (rated && rate !== newRate) {\r\n        dispatch(\r\n          ratePagedPost({\r\n            post: basePostData,\r\n            reaction: newRate,\r\n          })\r\n        );\r\n        await updatePostReactions();\r\n      } else {\r\n        dispatch(\r\n          ratePagedPost({\r\n            post: basePostData,\r\n            reaction: newRate,\r\n          })\r\n        );\r\n        await updatePostReactions();\r\n      }\r\n    },\r\n    [post, dispatch, getPost, patchPost]\r\n  );\r\n  return { ratePost: ratePostAsync, ratePagedPost: ratePagedPostAsync };\r\n};\r\n","import { TPost, TPostAppStore} from \"@/types/types\";\r\nimport { ReactElement } from \"react\";\r\nimport { BadgeContainer } from \"@/components/BadgeContainer\";\r\nimport { NavLink, useLocation } from \"react-router\";\r\nimport { Container } from \"@ui/Container\";\r\nimport { faThumbsUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faThumbsDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Button } from \"@ui/Button\";\r\nimport { ViewsContainer } from \"../ViewsContainer\";\r\nimport useFetch from \"@/hooks/useFetch\";\r\nimport { useRatePost } from \"@/hooks/useRatePost\";\r\nimport \"./style.scss\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\ntype TPostCardProps = {\r\n  link: string;\r\n  post: TPost;\r\n};\r\n\r\nexport const PostCard: React.FC<TPostCardProps> = ({\r\n  link,\r\n  post,\r\n}): ReactElement => {\r\n  const { pathname } = useLocation();\r\n  const postId = Number(pathname.split(\"/\").at(-1));\r\n  const { get, patch } = useFetch(`https://dummyjson.com`);\r\n  const { tag } = useSelector((state: TPostAppStore) => state.posts);\r\n  const { id : userId } = useSelector(\r\n    (state: TPostAppStore) => state.user.data\r\n  );\r\n  const { ratePost, ratePagedPost } = useRatePost({\r\n    post,\r\n    getPost: get,\r\n    patchPost: patch,\r\n  });\r\n  const ratePostAsync = async (newRate: string | object) => {\r\n    if (newRate === \"liked\") {\r\n      await ratePost(\"liked\");\r\n    } else {\r\n      await ratePost(\"disliked\");\r\n    }\r\n  };\r\n  const ratePagedPostAsync = async (newRate: string | object) => {\r\n    if (newRate === \"liked\") {\r\n      await ratePagedPost(\"liked\");\r\n    } else {\r\n      await ratePagedPost(\"disliked\");\r\n    }\r\n  };\r\n  return (\r\n    <article className=\"post-card\">\r\n      <div className=\"post-card__header\">\r\n        {post.user ? (\r\n          <Container>\r\n            <img\r\n              src={post.user.image}\r\n              alt={post.user.firstName + \" \" + post.user.lastName + \" avatar\"}\r\n            />\r\n            <h5>{post.user.firstName + \" \" + post.user.lastName}</h5>\r\n          </Container>\r\n        ) : <div></div>}\r\n        <BadgeContainer tags={post.tags} tagsStore={tag} />\r\n      </div>\r\n      <div className=\"post-card__body\">\r\n        <h2>{post.title}</h2>\r\n\r\n        {postId ? (\r\n          <img src={post.postImage} alt={post.title} />\r\n        ) : (\r\n          <NavLink to={link}>\r\n            <img src={post.postImage} alt={post.title} />\r\n          </NavLink>\r\n        )}\r\n        {postId ? <p>{post.body}</p> : <NavLink to={link}>{post.body}</NavLink>}\r\n      </div>\r\n      <div className=\"post-card__footer\">\r\n        <ViewsContainer views={post.views} />\r\n        <Container>\r\n          <Button\r\n            icon={faThumbsUp}\r\n            action={!postId ? ratePostAsync : ratePagedPostAsync}\r\n            payload={\"liked\"}\r\n            isAuthOnly={true}\r\n            disabled={post.userId === userId}\r\n            style={{color:'blue'}}\r\n          >\r\n            {post.reactions.likes}\r\n          </Button>\r\n          <Button\r\n            icon={faThumbsDown}\r\n            action={!postId ? ratePostAsync : ratePagedPostAsync}\r\n            payload={\"disliked\"}\r\n            isAuthOnly={true}\r\n            disabled={post.userId === userId}\r\n            style={{color:'red'}}\r\n          >\r\n            {post.reactions.dislikes}\r\n          </Button>\r\n        </Container>\r\n      </div>\r\n    </article>\r\n  );\r\n};\r\n","import { TPost } from \"@/types/types\";\r\nimport { ReactElement } from \"react\";\r\nimport { useLocation } from \"react-router\";\r\nimport { PostCard } from \"@components/PostCard\";\r\n\r\ninterface IPostsListProps {\r\n  post: TPost;\r\n}\r\n\r\nexport const Post: React.FC<IPostsListProps> = ({ post }): ReactElement => {\r\n  const location = useLocation();\r\n  return <PostCard link={`${location.pathname}/${post.id}`} post={post} />;\r\n};\r\n","import { ReactElement, useState, useEffect } from \"react\";\r\nimport \"./style.scss\";\r\n\r\ntype TTextAreaProps = {\r\n  value: string | number;\r\n  label?: string;\r\n  setValue: (value: string) => void;\r\n  required?: boolean;\r\n  rows?: number;\r\n};\r\n\r\nexport const TextArea: React.FC<TTextAreaProps> = ({\r\n  value,\r\n  setValue,\r\n  label,\r\n  required = false,\r\n  rows = 4,\r\n}: TTextAreaProps): ReactElement => {\r\n  const [isFocused, setIsFocused] = useState(false);\r\n  const [hasValue, setHasValue] = useState(!!value);\r\n\r\n  useEffect(() => {\r\n    setHasValue(!!value);\r\n  }, [value]);\r\n\r\n  return (\r\n    <div className={`textarea-container ${isFocused ? \"focused\" : \"\"} ${hasValue ? \"has-value\" : \"\"}`}>\r\n      {label && (\r\n        <label \r\n          className={`textarea-label ${isFocused || hasValue ? \"label-up\" : \"\"}`}\r\n        >\r\n          {label}\r\n          {required && <span className=\"required-star\">*</span>}\r\n        </label>\r\n      )}\r\n      <textarea\r\n        value={value}\r\n        onChange={(e) => setValue(e.target.value)}\r\n        onFocus={() => setIsFocused(true)}\r\n        onBlur={() => setIsFocused(false)}\r\n        className=\"styled-textarea\"\r\n        rows={rows}\r\n      />\r\n      <div className=\"textarea-underline\">\r\n        <div className={`underline-animation ${isFocused ? \"active\" : \"\"}`}></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};"],"names":["TagBadge","_ref","children","slug","action","disabled","tagStore","_jsx","className","includes","onClick","Container","ProtectedComponent","isLogged","useCheckToken","_Fragment","SearchBox","searchQuery","setSearchQuery","useState","debouncedString","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","dispatch","useDispatch","fetchSearchedPosts","Input","type","setValue","label","name","Select","defaultValue","options","_jsxs","onChange","e","target","map","option","index","SortBox","sortBy","setSortBy","sort","TagsBox","getSlug","data","useSelector","state","posts","postsTags","tag","PostsFilter","fetchPostsByTag","PostInput","id","firstName","lastName","image","user","isOpened","setIsOpened","body","setBody","title","setTitle","tags","setTags","notify","notifyPortal","useNotify","post","useFetch","Button","icon","faUpLong","faDownLong","style","color","TextArea","async","newPost","Math","floor","random","userId","comments","rate","postImage","fetchImage","rated","views","reactions","likes","dislikes","addPost","payload","faPaperPlane","PostsList","store","postsList","ref","useRef","current","fetchPosts","fetchTags","item","Post","PostsListRoute","BadgeContainer","tagsStore","sortByTag","ViewsContainer","FontAwesomeIcon","faEye","PostCard","link","pathname","useLocation","postId","Number","split","at","get","patch","ratePost","ratePagedPost","getPost","patchPost","useCallback","basePostData","updatePostReactions","updatedPost","getUpdatedPost","newRate","reaction","useRatePost","ratePostAsync","ratePagedPostAsync","src","alt","NavLink","to","faThumbsUp","isAuthOnly","faThumbsDown","location","required","rows","isFocused","setIsFocused","hasValue","setHasValue","onFocus","onBlur"],"sourceRoot":""}