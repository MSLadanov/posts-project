{"version":3,"file":"static/js/594.03598ca6.chunk.js","mappings":"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","sources":["components/ui/TagBadge/TagBadge.tsx","components/ui/Container/Container.tsx","components/ProtectedComponent/ProtectedComponent.tsx","components/SearchBox/SearchBox.tsx","hooks/useDebounce.ts","components/ui/Select/Select.tsx","components/SortBox/SortBox.tsx","components/TagsBox/TagsBox.tsx","components/PostsFilter/PostsFilter.tsx","components/PostInput/PostInput.tsx","components/PostsList/PostsList.tsx","routes/PostsListRoute.tsx","components/BadgeContainer/BadgeContainer.tsx","components/ViewsContainer/ViewsContainer.tsx","hooks/useRatePost.ts","components/PostCard/PostCard.tsx","components/Post/Post.tsx","components/ui/TextArea/TextArea.tsx"],"sourcesContent":["import { ReactElement } from \"react\";\nimport \"./style.scss\";\n\ntype TTagBadgeProps = {\n  children: string;\n  slug: string;\n  disabled?: boolean\n  action: (slug: string) => void;\n  tagStore: string[]\n};\n\nexport const TagBadge = ({\n  children,\n  slug,\n  action,\n  disabled = false, \n  tagStore\n}: TTagBadgeProps): ReactElement => {\n  return (\n    <button\n      className={tagStore.includes(slug) ? \"tag-badge__active\" : \"tag-badge\"}\n      disabled={disabled}\n      onClick={() => {\n        action(slug);\n      }}\n    >\n      <p>{children}</p>\n    </button>\n  );\n};\n","import { PropsWithChildren, ReactElement } from \"react\";\n\nexport const Container = ({ children }: PropsWithChildren): ReactElement => {\n  return <div className=\"container\">{children}</div>;\n};\n","import { useCheckToken } from \"@/hooks/useCheckToken\";\nimport { PropsWithChildren, ReactElement } from \"react\";\n\nexport const ProtectedComponent = ({\n  children,\n}: PropsWithChildren): ReactElement => {\n  const { isLogged } = useCheckToken();\n  if (isLogged) {\n    return <>{children}</>;\n  } else {\n    return <div></div>;\n  }\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport useDebounce from \"@hooks/useDebounce\";\nimport { ReactElement, useEffect, useState } from \"react\";\nimport { fetchPosts, fetchSearchedPosts } from \"@/store/posts.api\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"@/store\";\nimport { Input } from \"@ui/Input\";\n\nexport const SearchBox = (): ReactElement => {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const debouncedString = useDebounce(searchQuery, 500);\n  const dispatch = useDispatch<AppDispatch>();\n  useEffect(() => {\n    if (searchQuery) {\n      dispatch(fetchSearchedPosts(searchQuery));\n    } else {\n      dispatch(fetchPosts())\n    }\n  }, [debouncedString]);\n  return (\n    <div>\n      <Input type=\"text\" value={searchQuery} setValue={setSearchQuery} label=\"Search post...\" name=\"search-query\" />\n    </div>\n  );\n};\n","import { useState, useEffect } from \"react\";\n\nexport default function useDebounce(value: string, delay: number) : string {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [delay, value]);\n\n  return debouncedValue;\n}\n","import { ReactElement } from \"react\";\nimport \"./style.scss\";\n\ntype TSelectProps = {\n  options: string[];\n  defaultValue: string,\n  setValue: (value: string) => void;\n};\n\nexport const Select: React.FC<TSelectProps> = ({\n  defaultValue,\n  options,\n  setValue,\n}): ReactElement => {\n  return (\n    <select \n      className=\"custom-select\"\n      defaultValue={defaultValue} \n      onChange={(e) => setValue(e.target.value)}\n    >\n      <option disabled className=\"custom-select-default-option\">{defaultValue}</option>\n      {options.map((option, index) => (\n        <option key={index} className=\"custom-select-option\">{option}</option>\n      ))}\n    </select>\n  );\n};","import { ReactElement, useEffect, useState } from \"react\";\nimport { Select } from \"@ui/Select\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"@/store\";\nimport { sort } from \"@/store/slices/PostsSlices\";\nimport \"./style.scss\";\n\nexport const SortBox = (): ReactElement => {\n  const [sortBy, setSortBy] = useState(\"\");\n  const dispatch = useDispatch<AppDispatch>();\n  useEffect(() => {\n    dispatch(sort(sortBy));\n  }, [sortBy, dispatch]);\n  return (\n    <div>\n      <Select\n        options={[\"Likes\", \"Dislikes\", \"Views\"]}\n        defaultValue=\"------\"\n        setValue={setSortBy}\n      />\n    </div>\n  );\n};\n","import { ReactElement } from \"react\";\nimport { TPostAppStore } from \"@/types/types\";\nimport { TagBadge } from \"@ui/TagBadge\";\nimport { useSelector } from \"react-redux\";\nimport { Loader } from \"../Loader\";\nimport \"./style.scss\";\n\ninterface TagsBoxProps {\n  getSlug: (slug: string) => void;\n  tagStore: string[];\n}\n\nexport const TagsBox = ({ getSlug, tagStore }: TagsBoxProps): ReactElement => {\n  const { data, loading } = useSelector(\n    (state: TPostAppStore) => state.posts.postsTags\n  );\n  if (loading === 'pending') {\n    return <Loader />;\n  }\n  return (\n    <>\n      {data && (\n        <div className=\"tag-box\">\n          {\" \"}\n          {data.map((tag) => (\n            <TagBadge\n              key={tag.slug}\n              slug={tag.slug}\n              action={getSlug}\n              tagStore={tagStore}\n            >\n              {tag.name}\n            </TagBadge>\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\n","import { ReactElement } from \"react\";\nimport { SearchBox } from \"@components/SearchBox\";\nimport { SortBox } from \"@components/SortBox\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch } from \"@/store\";\nimport { fetchPostsByTag } from \"@/store/posts.api\";\nimport { TPostAppStore } from \"@/types/types\";\nimport { TagsBox } from \"@components/TagsBox\";\nimport './style.scss'\n\nexport const PostsFilter = (): ReactElement => {\n  const dispatch = useDispatch<AppDispatch>();\n  const { tag } = useSelector((state: TPostAppStore) => state.posts);\n  const handleSlug = (slug: string) => {\n    dispatch(fetchPostsByTag(slug));\n  };\n  return (\n    <div className=\"posts-filter\">\n      <SearchBox />\n      <h4>Sort by:</h4>\n      <SortBox />\n      <TagsBox getSlug={handleSlug} tagStore={tag} />\n    </div>\n  );\n};\n","import { ReactElement, useState } from \"react\";\nimport { TextArea } from \"../ui/TextArea\";\nimport { Button } from \"@ui/Button\";\nimport { Input } from \"../ui/Input\";\nimport {\n  faDownLong,\n  faPaperPlane,\n  faUpLong,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { TagsBox } from \"@components/TagsBox\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { TPost, TPostAppStore } from \"@/types/types\";\nimport { fetchImage } from \"@/store/slices/utils\";\nimport { AppDispatch } from \"@/store\";\nimport { addPost } from \"@/store/slices/PostsSlices\";\nimport useFetch from \"@/hooks/useFetch\";\nimport { useNotify } from \"@/hooks/useNotify\";\nimport \"./style.scss\";\n\nexport const PostInput = (): ReactElement => {\n  const { id, firstName, lastName, image } = useSelector(\n    (state: TPostAppStore) => state.user.data\n  );\n  const [isOpened, setIsOpened] = useState(false);\n  const dispatch = useDispatch<AppDispatch>();\n  const [body, setBody] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [tags, setTags] = useState<string[]>([]);\n  const clearPostInput = () => {\n    setBody(\"\");\n    setTitle(\"\");\n    setTags([]);\n    setIsOpened(false);\n  };\n  const { notify, notifyPortal } = useNotify();\n  const handleSlug = (slug: string) => {\n    setTags([...tags, slug]);\n  };\n  const { post } = useFetch(`https://dummyjson.com`);\n  const addNewPost = async () => {\n    const newPost: TPost = {\n      id: Math.floor(Math.random() * 20001) + 10000,\n      userId: id,\n      user: {\n        firstName,\n        lastName,\n        image,\n      },\n      comments: [],\n      rate: \"\",\n      postImage: await fetchImage(title),\n      rated: false,\n      title,\n      body,\n      tags,\n      views: 0,\n      reactions: {\n        likes: 0,\n        dislikes: 0,\n      },\n    };\n    dispatch(addPost(newPost));\n    notify(\"New post added!\", \"success\");\n    await post(\"posts/add\", newPost);\n    clearPostInput();\n  };\n  return (\n    <div>\n      <Button\n        icon={isOpened ? faUpLong : faDownLong}\n        style={{ color: \"black\" }}\n        action={() => setIsOpened((isOpened) => !isOpened)}\n      >\n        Write post\n      </Button>\n      <div className={isOpened ? \"post-input__visible\" : \"post-input\"}>\n        <h4>Choose tags:</h4>\n        <TagsBox getSlug={handleSlug} tagStore={tags} />\n        <Input\n          value={title}\n          setValue={setTitle}\n          type=\"text\"\n          label=\"Post title:\"\n          name=\"post-title\"\n        />\n        <TextArea value={body} setValue={setBody} label=\"Post text:\" />\n        <Button\n          action={addNewPost}\n          payload={{ body, title, tags }}\n          icon={faPaperPlane}\n          style={{ color: \"black\" }}\n        >\n          Send post\n        </Button>\n      </div>\n      {notifyPortal}\n    </div>\n  );\n};\n","import { AppDispatch } from \"@/store\";\nimport { fetchPosts, fetchTags } from \"@/store/posts.api\";\nimport { TPostAppStore, TPost } from \"@/types/types\";\nimport { ReactElement, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Post } from \"@components/Post\";\nimport { PostInput } from \"@components/PostInput\";\nimport { ProtectedComponent } from \"@components/ProtectedComponent\";\nimport { Loader } from \"../Loader\";\nimport { faFaceFrown } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./style.scss\";\n\nexport const PostsList = (): ReactElement => {\n  const dispatch = useDispatch<AppDispatch>();\n  const { data, loading } = useSelector(\n    (store: TPostAppStore) => store.posts.postsList\n  );\n  useEffect(() => {\n    dispatch(fetchPosts());\n    dispatch(fetchTags());\n  }, [dispatch]);\n  if (loading === \"pending\") {\n    return <Loader />;\n  }\n  if (loading === \"succeeded\" && data.length === 0) {\n    return (\n      <div className=\"no-posts\">\n        <FontAwesomeIcon icon={faFaceFrown} />\n        <h2>No posts!</h2>\n      </div>\n    );\n  }\n  return (\n    <>\n      <ProtectedComponent>\n        <PostInput />\n      </ProtectedComponent>\n      <div className=\"post-list\">\n        {data.map((item: TPost) => (\n          <Post key={item.id} post={item} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { ReactElement } from \"react\";\nimport { PostsFilter } from \"@/components/PostsFilter\";\nimport { PostsList } from \"@/components/PostsList\";\n\nconst PostsListRoute = (): ReactElement => {\n  return (\n    <main>\n      <PostsFilter />\n      <PostsList />\n    </main>\n  );\n};\n\nexport default PostsListRoute\n","import { ReactElement } from \"react\";\nimport { TagBadge } from \"@ui/TagBadge\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"@/store\";\nimport { fetchPostsByTag } from \"@/store/posts.api\";\nimport \"./style.scss\";\n\ntype TBadgeContainerProps = {\n  tags: string[];\n  tagsStore: string[];\n};\n\nexport const BadgeContainer: React.FC<TBadgeContainerProps> = ({\n  tags,\n  tagsStore,\n}): ReactElement => {\n  const dispatch = useDispatch<AppDispatch>();\n  const sortByTag = (slug: string) => {\n    dispatch(fetchPostsByTag(slug));\n  };\n  return (\n    <div className=\"badge-container\">\n      {tags.map((tag, index) => (\n        <TagBadge key={index} slug={tag} action={sortByTag} tagStore={tagsStore}>\n          {tag}\n        </TagBadge>\n      ))}\n    </div>\n  );\n};\n","import { faEye } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { ReactElement } from \"react\";\nimport \"./style.scss\";\n\ntype TViewsContainer = {\n  views: number;\n};\n\nexport const ViewsContainer: React.FC<TViewsContainer> = ({\n  views,\n}): ReactElement => {\n  return (\n    <div className=\"view-container\">\n      <div className=\"view-container__icon\">\n        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>\n      </div>\n      <div className=\"view-container__counter\">\n        <p>{views}</p>\n      </div>\n    </div>\n  );\n};\n","import { getUpdatedPost } from \"@/store/posts.api\";\nimport { ratePost, ratePagedPost } from \"@/store/slices/PostsSlices\";\nimport { TPost } from \"@/types/types\";\nimport { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\ninterface UseRatePostProps {\n  post: TPost;\n  getPost: <T>(endpoint: string) => Promise<T | undefined>;\n  patchPost: <T>(endpoint: string, data: any) => Promise<T | undefined>;\n}\n\nexport const useRatePost = ({ post, getPost, patchPost }: UseRatePostProps) => {\n  const dispatch = useDispatch();\n  const ratePostAsync = useCallback(\n    async (newRate: string | object) => {\n      const { rated, rate } = post;\n      const updatingPost = await getPost<TPost>(`posts/${post.id}`);\n      const basePostData = {\n        ...updatingPost,\n        user: post.user,\n        postImage: post.postImage\n      };\n      const updatePostReactions = async () => {\n        const updatedPost = getUpdatedPost(post.id);\n        await patchPost<TPost>(`posts/${post.id}`, {\n          reactions: updatedPost?.reactions,\n        });\n      };\n      if (rated && rate === newRate) {\n        dispatch(ratePost({ post: basePostData }));\n        await updatePostReactions();\n      } else if (rated && rate !== newRate) {\n        dispatch(\n          ratePost({\n            post: basePostData,\n            reaction: newRate,\n          })\n        );\n        await updatePostReactions();\n      } else {\n        dispatch(\n          ratePost({\n            post: basePostData,\n            reaction: newRate,\n          })\n        );\n        await updatePostReactions();\n      }\n    },\n    [post, dispatch, getPost, patchPost]\n  );\n\n  const ratePagedPostAsync = useCallback(\n    async (newRate: string | object) => {\n      const { rated, rate } = post;\n      const updatingPost = await getPost<TPost>(`posts/${post.id}`);\n      const basePostData = {\n        ...updatingPost,\n        user: post.user,\n        postImage: post.postImage\n      };\n      const updatePostReactions = async () => {\n        const updatedPost = getUpdatedPost(post.id);\n        await patchPost<TPost>(`posts/${post.id}`, {\n          reactions: updatedPost?.reactions,\n        });\n      };\n      if (rated && rate === newRate) {\n        dispatch(ratePagedPost({ post: basePostData }));\n        await updatePostReactions();\n      } else if (rated && rate !== newRate) {\n        dispatch(\n          ratePagedPost({\n            post: basePostData,\n            reaction: newRate,\n          })\n        );\n        await updatePostReactions();\n      } else {\n        dispatch(\n          ratePagedPost({\n            post: basePostData,\n            reaction: newRate,\n          })\n        );\n        await updatePostReactions();\n      }\n    },\n    [post, dispatch, getPost, patchPost]\n  );\n  return { ratePost: ratePostAsync, ratePagedPost: ratePagedPostAsync };\n};\n","import { TPost, TPostAppStore} from \"@/types/types\";\nimport { ReactElement } from \"react\";\nimport { BadgeContainer } from \"@/components/BadgeContainer\";\nimport { NavLink, useLocation } from \"react-router\";\nimport { Container } from \"@ui/Container\";\nimport { faThumbsUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { faThumbsDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { Button } from \"@ui/Button\";\nimport { ViewsContainer } from \"../ViewsContainer\";\nimport useFetch from \"@/hooks/useFetch\";\nimport { useRatePost } from \"@/hooks/useRatePost\";\nimport \"./style.scss\";\nimport { useSelector } from \"react-redux\";\n\ntype TPostCardProps = {\n  link: string;\n  post: TPost;\n};\n\nexport const PostCard: React.FC<TPostCardProps> = ({\n  link,\n  post,\n}): ReactElement => {\n  const { pathname } = useLocation();\n  const postId = Number(pathname.split(\"/\").at(-1));\n  const { get, patch } = useFetch(`https://dummyjson.com`);\n  const { tag } = useSelector((state: TPostAppStore) => state.posts);\n  const { id : userId } = useSelector(\n    (state: TPostAppStore) => state.user.data\n  );\n  const { ratePost, ratePagedPost } = useRatePost({\n    post,\n    getPost: get,\n    patchPost: patch,\n  });\n  const ratePostAsync = async (newRate: string | object) => {\n    if (newRate === \"liked\") {\n      await ratePost(\"liked\");\n    } else {\n      await ratePost(\"disliked\");\n    }\n  };\n  const ratePagedPostAsync = async (newRate: string | object) => {\n    if (newRate === \"liked\") {\n      await ratePagedPost(\"liked\");\n    } else {\n      await ratePagedPost(\"disliked\");\n    }\n  };\n  return (\n    <article className=\"post-card\">\n      <div className=\"post-card__header\">\n        {post.user ? (\n          <Container>\n            <img\n              src={post.user.image}\n              alt={post.user.firstName + \" \" + post.user.lastName + \" avatar\"}\n            />\n            <h5>{post.user.firstName + \" \" + post.user.lastName}</h5>\n          </Container>\n        ) : <div></div>}\n        <BadgeContainer tags={post.tags} tagsStore={tag} />\n      </div>\n      <div className=\"post-card__body\">\n        <h2>{post.title}</h2>\n\n        {postId ? (\n          <img src={post.postImage} alt={post.title} />\n        ) : (\n          <NavLink to={link}>\n            <img src={post.postImage} alt={post.title} />\n          </NavLink>\n        )}\n        {postId ? <p>{post.body}</p> : <NavLink to={link}>{post.body}</NavLink>}\n      </div>\n      <div className=\"post-card__footer\">\n        <ViewsContainer views={post.views} />\n        <Container>\n          <Button\n            icon={faThumbsUp}\n            action={!postId ? ratePostAsync : ratePagedPostAsync}\n            payload={\"liked\"}\n            isAuthOnly={true}\n            disabled={post.userId === userId}\n            style={{color:'blue'}}\n          >\n            {post.reactions.likes}\n          </Button>\n          <Button\n            icon={faThumbsDown}\n            action={!postId ? ratePostAsync : ratePagedPostAsync}\n            payload={\"disliked\"}\n            isAuthOnly={true}\n            disabled={post.userId === userId}\n            style={{color:'red'}}\n          >\n            {post.reactions.dislikes}\n          </Button>\n        </Container>\n      </div>\n    </article>\n  );\n};\n","import { TPost } from \"@/types/types\";\nimport { ReactElement } from \"react\";\nimport { useLocation } from \"react-router\";\nimport { PostCard } from \"@components/PostCard\";\n\ninterface IPostsListProps {\n  post: TPost;\n}\n\nexport const Post: React.FC<IPostsListProps> = ({ post }): ReactElement => {\n  const location = useLocation();\n  return <PostCard link={`${location.pathname}/${post.id}`} post={post} />;\n};\n","import { ReactElement, useState, useEffect } from \"react\";\nimport \"./style.scss\";\n\ntype TTextAreaProps = {\n  value: string | number;\n  label?: string;\n  setValue: (value: string) => void;\n  required?: boolean;\n  rows?: number;\n};\n\nexport const TextArea: React.FC<TTextAreaProps> = ({\n  value,\n  setValue,\n  label,\n  required = false,\n  rows = 4,\n}: TTextAreaProps): ReactElement => {\n  const [isFocused, setIsFocused] = useState(false);\n  const [hasValue, setHasValue] = useState(!!value);\n\n  useEffect(() => {\n    setHasValue(!!value);\n  }, [value]);\n\n  return (\n    <div className={`textarea-container ${isFocused ? \"focused\" : \"\"} ${hasValue ? \"has-value\" : \"\"}`}>\n      {label && (\n        <label \n          className={`textarea-label ${isFocused || hasValue ? \"label-up\" : \"\"}`}\n        >\n          {label}\n          {required && <span className=\"required-star\">*</span>}\n        </label>\n      )}\n      <textarea\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        onFocus={() => setIsFocused(true)}\n        onBlur={() => setIsFocused(false)}\n        className=\"styled-textarea\"\n        rows={rows}\n      />\n      <div className=\"textarea-underline\">\n        <div className={`underline-animation ${isFocused ? \"active\" : \"\"}`}></div>\n      </div>\n    </div>\n  );\n};"],"names":["TagBadge","_ref","children","slug","action","disabled","tagStore","_jsx","className","includes","onClick","Container","ProtectedComponent","isLogged","useCheckToken","_Fragment","SearchBox","searchQuery","setSearchQuery","useState","debouncedString","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","dispatch","useDispatch","fetchSearchedPosts","fetchPosts","Input","type","setValue","label","name","Select","defaultValue","options","_jsxs","onChange","e","target","map","option","index","SortBox","sortBy","setSortBy","sort","TagsBox","getSlug","data","loading","useSelector","state","posts","postsTags","Loader","tag","PostsFilter","fetchPostsByTag","PostInput","id","firstName","lastName","image","user","isOpened","setIsOpened","body","setBody","title","setTitle","tags","setTags","notify","notifyPortal","useNotify","post","useFetch","Button","icon","faUpLong","faDownLong","style","color","TextArea","async","newPost","Math","floor","random","userId","comments","rate","postImage","fetchImage","rated","views","reactions","likes","dislikes","addPost","payload","faPaperPlane","PostsList","store","postsList","fetchTags","length","FontAwesomeIcon","faFaceFrown","item","Post","PostsListRoute","BadgeContainer","tagsStore","sortByTag","ViewsContainer","faEye","PostCard","link","pathname","useLocation","postId","Number","split","at","get","patch","ratePost","ratePagedPost","getPost","patchPost","useCallback","basePostData","updatePostReactions","updatedPost","getUpdatedPost","newRate","reaction","useRatePost","ratePostAsync","ratePagedPostAsync","src","alt","NavLink","to","faThumbsUp","isAuthOnly","faThumbsDown","location","required","rows","isFocused","setIsFocused","hasValue","setHasValue","onFocus","onBlur"],"sourceRoot":""}