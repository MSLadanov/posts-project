{"version":3,"file":"static/js/306.da0b6742.chunk.js","mappings":"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","sources":["components/ui/TagBadge/TagBadge.tsx","components/CommentCard/CommentCard.tsx","hooks/useRateComment.ts","components/CommentInput/CommentInput.tsx","components/Comments/Comments.tsx","components/PostPage/PostPage.tsx","routes/PostRoute.tsx","components/ui/Container/Container.tsx","components/ProtectedComponent/ProtectedComponent.tsx","components/BadgeContainer/BadgeContainer.tsx","components/ViewsContainer/ViewsContainer.tsx","hooks/useRatePost.ts","components/PostCard/PostCard.tsx","components/Post/Post.tsx","components/ui/TextArea/TextArea.tsx"],"sourcesContent":["import { ReactElement } from \"react\";\nimport \"./style.scss\";\n\ntype TTagBadgeProps = {\n  children: string;\n  slug: string;\n  disabled?: boolean\n  action: (slug: string) => void;\n  tagStore: string[]\n};\n\nexport const TagBadge = ({\n  children,\n  slug,\n  action,\n  disabled = false, \n  tagStore\n}: TTagBadgeProps): ReactElement => {\n  return (\n    <button\n      className={tagStore.includes(slug) ? \"tag-badge__active\" : \"tag-badge\"}\n      disabled={disabled}\n      onClick={() => {\n        action(slug);\n      }}\n    >\n      <p>{children}</p>\n    </button>\n  );\n};\n","import { TComment, TPostAppStore } from \"@/types/types\";\nimport { ReactElement } from \"react\";\nimport { faThumbsUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { Button } from \"@ui/Button\";\nimport { Container } from \"@ui/Container\";\nimport useFetch from \"@hooks/useFetch\";\nimport { useRateComment } from \"@/hooks/useRateComment\";\nimport \"./style.scss\";\nimport { useSelector } from \"react-redux\";\n\nexport const CommentCard: React.FC<{ comment: TComment }> = ({\n  comment,\n}): ReactElement => {\n  const { patch } = useFetch(`https://dummyjson.com`);\n  const { commentState, rateComment } = useRateComment({ comment, patch });\n  const { id } = useSelector((state: TPostAppStore) => state.user.data);\n  return (\n    <div className=\"comment-card\">\n      <div className=\"comment-card__header\">\n        <Container>\n          <img\n            src={`https://dummyjson.com/icon/${commentState.user.username}/128`}\n            alt={commentState.user.fullName + \" avatar\"}\n          />\n          <h5>{commentState.user.fullName}</h5>\n        </Container>\n      </div>\n      <div className=\"comment-card__body\">\n        <p>{commentState.body}</p>\n      </div>\n      <div className=\"comment-card__footer\">\n        <Container>\n          <Button\n            icon={faThumbsUp}\n            action={rateComment}\n            disabled={comment.user.id === id}\n            isAuthOnly={true}\n            payload={\"\"}\n            style={{color: 'blue'}}\n          >\n            {commentState.likes}\n          </Button>\n        </Container>\n      </div>\n    </div>\n  );\n};\n","import { TComment } from \"@/types/types\";\nimport { useState, useCallback } from \"react\";\n\ninterface UseCommentPostProps {\n  comment: TComment;\n  patch: <T>(endpoint: string, data: any) => Promise<T | undefined>;\n}\n\nexport const useRateComment = ({ comment, patch }: UseCommentPostProps) => {\n  const [commentState, setCommentState] = useState(comment);\n  const rateCommentAsync = useCallback(async () => {\n    const newLikes = commentState.liked\n      ? commentState.likes - 1\n      : commentState.likes + 1;\n    const newLiked = !commentState.liked;\n    setCommentState({\n      ...commentState,\n      likes: newLikes,\n      liked: newLiked,\n    });\n    try {\n      const ratedComment = await patch<TComment>(`comments/${comment.id}`, {\n        likes: newLikes,\n      });\n      if (\n        ratedComment &&\n        (ratedComment.likes !== newLikes || ratedComment.liked !== newLiked)\n      ) {\n      }\n    } catch (error) {\n      setCommentState(commentState);\n      console.log(error);\n    }\n  }, [comment.id, commentState, patch]);\n\n  return { commentState, rateComment: rateCommentAsync };\n};\n","import { ReactElement, useState } from \"react\";\nimport { Button } from \"@ui/Button\";\nimport { faCommentDots } from \"@fortawesome/free-solid-svg-icons\";\nimport { TextArea } from \"@ui/TextArea\";\nimport { useLocation } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { TComment, TPostAppStore } from \"@/types/types\";\nimport { AppDispatch } from \"@/store\";\nimport { addComment } from \"@/store/slices/PostsSlices\";\nimport useFetch from \"@/hooks/useFetch\";\n\nexport const CommentInput = (): ReactElement => {\n  const [commentText, setCommentText] = useState(\"\");\n  const { pathname } = useLocation();\n  const dispatch = useDispatch<AppDispatch>();\n  const { post } = useFetch(`https://dummyjson.com`);\n  const { id, username, firstName, lastName } = useSelector(\n    (state: TPostAppStore) => state.user.data\n  );\n  const postId = Number(pathname.split(\"/\").at(-1));\n  const sendComment = async () => {\n    const newComment: TComment = {\n      id: Math.floor(Math.random() * 20001) + 10000,\n      body: commentText,\n      postId,\n      likes: 0,\n      user: {\n        id,\n        fullName: firstName + \" \" + lastName,\n        username,\n      },\n    };\n    dispatch(addComment(newComment));\n    await post('comments/add', newComment)\n  };\n  return (\n    <div>\n      <img\n        src={`https://dummyjson.com/icon/${username}/50`}\n        alt={firstName + \" \" + lastName + \" avatar\"}\n      />\n      <TextArea label=\"Comment text:\" value={commentText} setValue={setCommentText} />\n      <Button action={sendComment} payload={commentText} icon={faCommentDots} style={{color:'black'}} />\n    </div>\n  );\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { ReactElement, useEffect } from \"react\";\nimport { TComment, TPostAppStore } from \"@/types/types\";\nimport { CommentCard } from \"@/components/CommentCard\";\nimport { CommentInput } from \"@components/CommentInput\";\nimport { ProtectedComponent } from \"@components/ProtectedComponent\";\nimport { fetchPostComments } from \"@/store/posts.api\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch } from \"@/store\";\n\nexport const Comments: React.FC<{ postId: number }> = ({\n  postId,\n}): ReactElement => {\n  const { data } = useSelector((state : TPostAppStore) => state.posts.comments)\n  const dispatch = useDispatch<AppDispatch>()\n  useEffect(() => {\n    dispatch(fetchPostComments(postId))\n  }, [postId]);\n  return (\n    <div>\n      <ProtectedComponent>\n        <CommentInput />\n      </ProtectedComponent>\n      {data.map((comment : TComment) => (\n        <CommentCard key={comment.id} comment={comment} />\n      ))}\n    </div>\n  );\n};\n","import { ReactElement, useEffect } from \"react\";\nimport { useLocation } from \"react-router\";\nimport { fetchPostById } from \"@/store/posts.api\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch } from \"@/store\";\nimport { TPostAppStore } from \"@/types/types\";\nimport { Post } from \"@components/Post\";\nimport { Comments } from \"@components/Comments\";\nimport { Loader } from \"../Loader\";\nimport \"./style.scss\";\n\nexport const PostPage = (): ReactElement | null => {\n  const { pathname } = useLocation();\n  const postId = Number(pathname.split(\"/\").at(-1));\n  const dispatch = useDispatch<AppDispatch>();\n  const { data, loading } = useSelector(\n    (store: TPostAppStore) => store.posts.post\n  );\n  useEffect(() => {\n    dispatch(fetchPostById(postId));\n  }, [dispatch, postId]);\n  if(loading === 'pending'){\n    return <Loader/>\n  }\n  if (loading === \"succeeded\") {\n    return (\n      <div className=\"post-page\">\n        <Post post={data!} />\n        <Comments postId={postId} />\n      </div>\n    );\n  } else {\n    return null;\n  }\n};\n","import { PostPage } from \"@/components/PostPage\";\nimport { AppDispatch } from \"@/store\";\nimport { fetchPostById } from \"@/store/posts.api\";\nimport { ReactElement, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useLocation } from \"react-router\";\n\nconst PostRoute = (): ReactElement => {\n  const { pathname } = useLocation();\n  const id = Number(pathname.split(\"/\").at(-1));\n  const dispatch = useDispatch<AppDispatch>();\n  useEffect(() => {\n    if (typeof id !== \"number\") {\n      dispatch(fetchPostById(id));\n    }\n  }, [id, dispatch]);\n  return (\n    <main>\n      <PostPage />\n    </main>\n  );\n};\n\nexport default PostRoute","import { PropsWithChildren, ReactElement } from \"react\";\n\nexport const Container = ({ children }: PropsWithChildren): ReactElement => {\n  return <div className=\"container\">{children}</div>;\n};\n","import { useCheckToken } from \"@/hooks/useCheckToken\";\nimport { PropsWithChildren, ReactElement } from \"react\";\n\nexport const ProtectedComponent = ({\n  children,\n}: PropsWithChildren): ReactElement => {\n  const { isLogged } = useCheckToken();\n  if (isLogged) {\n    return <>{children}</>;\n  } else {\n    return <div></div>;\n  }\n};\n","import { ReactElement } from \"react\";\nimport { TagBadge } from \"@ui/TagBadge\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"@/store\";\nimport { fetchPostsByTag } from \"@/store/posts.api\";\nimport \"./style.scss\";\n\ntype TBadgeContainerProps = {\n  tags: string[];\n  tagsStore: string[];\n};\n\nexport const BadgeContainer: React.FC<TBadgeContainerProps> = ({\n  tags,\n  tagsStore,\n}): ReactElement => {\n  const dispatch = useDispatch<AppDispatch>();\n  const sortByTag = (slug: string) => {\n    dispatch(fetchPostsByTag(slug));\n  };\n  return (\n    <div className=\"badge-container\">\n      {tags.map((tag, index) => (\n        <TagBadge key={index} slug={tag} action={sortByTag} tagStore={tagsStore}>\n          {tag}\n        </TagBadge>\n      ))}\n    </div>\n  );\n};\n","import { faEye } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { ReactElement } from \"react\";\nimport \"./style.scss\";\n\ntype TViewsContainer = {\n  views: number;\n};\n\nexport const ViewsContainer: React.FC<TViewsContainer> = ({\n  views,\n}): ReactElement => {\n  return (\n    <div className=\"view-container\">\n      <div className=\"view-container__icon\">\n        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>\n      </div>\n      <div className=\"view-container__counter\">\n        <p>{views}</p>\n      </div>\n    </div>\n  );\n};\n","import { getUpdatedPost } from \"@/store/posts.api\";\nimport { ratePost, ratePagedPost } from \"@/store/slices/PostsSlices\";\nimport { TPost } from \"@/types/types\";\nimport { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\ninterface UseRatePostProps {\n  post: TPost;\n  getPost: <T>(endpoint: string) => Promise<T | undefined>;\n  patchPost: <T>(endpoint: string, data: any) => Promise<T | undefined>;\n}\n\nexport const useRatePost = ({ post, getPost, patchPost }: UseRatePostProps) => {\n  const dispatch = useDispatch();\n  const ratePostAsync = useCallback(\n    async (newRate: string | object) => {\n      const { rated, rate } = post;\n      const updatingPost = await getPost<TPost>(`posts/${post.id}`);\n      const basePostData = {\n        ...updatingPost,\n        user: post.user,\n        postImage: post.postImage\n      };\n      const updatePostReactions = async () => {\n        const updatedPost = getUpdatedPost(post.id);\n        await patchPost<TPost>(`posts/${post.id}`, {\n          reactions: updatedPost?.reactions,\n        });\n      };\n      if (rated && rate === newRate) {\n        dispatch(ratePost({ post: basePostData }));\n        await updatePostReactions();\n      } else if (rated && rate !== newRate) {\n        dispatch(\n          ratePost({\n            post: basePostData,\n            reaction: newRate,\n          })\n        );\n        await updatePostReactions();\n      } else {\n        dispatch(\n          ratePost({\n            post: basePostData,\n            reaction: newRate,\n          })\n        );\n        await updatePostReactions();\n      }\n    },\n    [post, dispatch, getPost, patchPost]\n  );\n\n  const ratePagedPostAsync = useCallback(\n    async (newRate: string | object) => {\n      const { rated, rate } = post;\n      const updatingPost = await getPost<TPost>(`posts/${post.id}`);\n      const basePostData = {\n        ...updatingPost,\n        user: post.user,\n        postImage: post.postImage\n      };\n      const updatePostReactions = async () => {\n        const updatedPost = getUpdatedPost(post.id);\n        await patchPost<TPost>(`posts/${post.id}`, {\n          reactions: updatedPost?.reactions,\n        });\n      };\n      if (rated && rate === newRate) {\n        dispatch(ratePagedPost({ post: basePostData }));\n        await updatePostReactions();\n      } else if (rated && rate !== newRate) {\n        dispatch(\n          ratePagedPost({\n            post: basePostData,\n            reaction: newRate,\n          })\n        );\n        await updatePostReactions();\n      } else {\n        dispatch(\n          ratePagedPost({\n            post: basePostData,\n            reaction: newRate,\n          })\n        );\n        await updatePostReactions();\n      }\n    },\n    [post, dispatch, getPost, patchPost]\n  );\n  return { ratePost: ratePostAsync, ratePagedPost: ratePagedPostAsync };\n};\n","import { TPost, TPostAppStore} from \"@/types/types\";\nimport { ReactElement } from \"react\";\nimport { BadgeContainer } from \"@/components/BadgeContainer\";\nimport { NavLink, useLocation } from \"react-router\";\nimport { Container } from \"@ui/Container\";\nimport { faThumbsUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { faThumbsDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { Button } from \"@ui/Button\";\nimport { ViewsContainer } from \"../ViewsContainer\";\nimport useFetch from \"@/hooks/useFetch\";\nimport { useRatePost } from \"@/hooks/useRatePost\";\nimport \"./style.scss\";\nimport { useSelector } from \"react-redux\";\n\ntype TPostCardProps = {\n  link: string;\n  post: TPost;\n};\n\nexport const PostCard: React.FC<TPostCardProps> = ({\n  link,\n  post,\n}): ReactElement => {\n  const { pathname } = useLocation();\n  const postId = Number(pathname.split(\"/\").at(-1));\n  const { get, patch } = useFetch(`https://dummyjson.com`);\n  const { tag } = useSelector((state: TPostAppStore) => state.posts);\n  const { id : userId } = useSelector(\n    (state: TPostAppStore) => state.user.data\n  );\n  const { ratePost, ratePagedPost } = useRatePost({\n    post,\n    getPost: get,\n    patchPost: patch,\n  });\n  const ratePostAsync = async (newRate: string | object) => {\n    if (newRate === \"liked\") {\n      await ratePost(\"liked\");\n    } else {\n      await ratePost(\"disliked\");\n    }\n  };\n  const ratePagedPostAsync = async (newRate: string | object) => {\n    if (newRate === \"liked\") {\n      await ratePagedPost(\"liked\");\n    } else {\n      await ratePagedPost(\"disliked\");\n    }\n  };\n  return (\n    <article className=\"post-card\">\n      <div className=\"post-card__header\">\n        {post.user ? (\n          <Container>\n            <img\n              src={post.user.image}\n              alt={post.user.firstName + \" \" + post.user.lastName + \" avatar\"}\n            />\n            <h5>{post.user.firstName + \" \" + post.user.lastName}</h5>\n          </Container>\n        ) : <div></div>}\n        <BadgeContainer tags={post.tags} tagsStore={tag} />\n      </div>\n      <div className=\"post-card__body\">\n        <h2>{post.title}</h2>\n\n        {postId ? (\n          <img src={post.postImage} alt={post.title} />\n        ) : (\n          <NavLink to={link}>\n            <img src={post.postImage} alt={post.title} />\n          </NavLink>\n        )}\n        {postId ? <p>{post.body}</p> : <NavLink to={link}>{post.body}</NavLink>}\n      </div>\n      <div className=\"post-card__footer\">\n        <ViewsContainer views={post.views} />\n        <Container>\n          <Button\n            icon={faThumbsUp}\n            action={!postId ? ratePostAsync : ratePagedPostAsync}\n            payload={\"liked\"}\n            isAuthOnly={true}\n            disabled={post.userId === userId}\n            style={{color:'blue'}}\n          >\n            {post.reactions.likes}\n          </Button>\n          <Button\n            icon={faThumbsDown}\n            action={!postId ? ratePostAsync : ratePagedPostAsync}\n            payload={\"disliked\"}\n            isAuthOnly={true}\n            disabled={post.userId === userId}\n            style={{color:'red'}}\n          >\n            {post.reactions.dislikes}\n          </Button>\n        </Container>\n      </div>\n    </article>\n  );\n};\n","import { TPost } from \"@/types/types\";\nimport { ReactElement } from \"react\";\nimport { useLocation } from \"react-router\";\nimport { PostCard } from \"@components/PostCard\";\n\ninterface IPostsListProps {\n  post: TPost;\n}\n\nexport const Post: React.FC<IPostsListProps> = ({ post }): ReactElement => {\n  const location = useLocation();\n  return <PostCard link={`${location.pathname}/${post.id}`} post={post} />;\n};\n","import { ReactElement, useState, useEffect } from \"react\";\nimport \"./style.scss\";\n\ntype TTextAreaProps = {\n  value: string | number;\n  label?: string;\n  setValue: (value: string) => void;\n  required?: boolean;\n  rows?: number;\n};\n\nexport const TextArea: React.FC<TTextAreaProps> = ({\n  value,\n  setValue,\n  label,\n  required = false,\n  rows = 4,\n}: TTextAreaProps): ReactElement => {\n  const [isFocused, setIsFocused] = useState(false);\n  const [hasValue, setHasValue] = useState(!!value);\n\n  useEffect(() => {\n    setHasValue(!!value);\n  }, [value]);\n\n  return (\n    <div className={`textarea-container ${isFocused ? \"focused\" : \"\"} ${hasValue ? \"has-value\" : \"\"}`}>\n      {label && (\n        <label \n          className={`textarea-label ${isFocused || hasValue ? \"label-up\" : \"\"}`}\n        >\n          {label}\n          {required && <span className=\"required-star\">*</span>}\n        </label>\n      )}\n      <textarea\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        onFocus={() => setIsFocused(true)}\n        onBlur={() => setIsFocused(false)}\n        className=\"styled-textarea\"\n        rows={rows}\n      />\n      <div className=\"textarea-underline\">\n        <div className={`underline-animation ${isFocused ? \"active\" : \"\"}`}></div>\n      </div>\n    </div>\n  );\n};"],"names":["TagBadge","_ref","children","slug","action","disabled","tagStore","_jsx","className","includes","onClick","CommentCard","comment","patch","useFetch","commentState","rateComment","setCommentState","useState","rateCommentAsync","useCallback","async","newLikes","liked","likes","newLiked","ratedComment","id","error","console","log","useRateComment","useSelector","state","user","data","_jsxs","Container","src","username","alt","fullName","body","Button","icon","faThumbsUp","isAuthOnly","payload","style","color","CommentInput","commentText","setCommentText","pathname","useLocation","dispatch","useDispatch","post","firstName","lastName","postId","Number","split","at","TextArea","label","value","setValue","newComment","Math","floor","random","addComment","faCommentDots","Comments","posts","comments","useEffect","fetchPostComments","ProtectedComponent","map","PostPage","loading","store","fetchPostById","Loader","Post","PostRoute","isLogged","useCheckToken","_Fragment","BadgeContainer","tags","tagsStore","sortByTag","fetchPostsByTag","tag","index","ViewsContainer","views","FontAwesomeIcon","faEye","PostCard","link","get","userId","ratePost","ratePagedPost","getPost","patchPost","rated","rate","basePostData","postImage","updatePostReactions","updatedPost","getUpdatedPost","reactions","newRate","reaction","useRatePost","ratePostAsync","ratePagedPostAsync","image","title","NavLink","to","faThumbsDown","dislikes","location","required","rows","isFocused","setIsFocused","hasValue","setHasValue","onChange","e","target","onFocus","onBlur"],"sourceRoot":""}