{"version":3,"file":"static/js/306.fcd7d684.chunk.js","mappings":"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","sources":["components/ui/TagBadge/TagBadge.tsx","components/CommentCard/CommentCard.tsx","hooks/useRateComment.ts","components/CommentInput/CommentInput.tsx","components/Comments/Comments.tsx","components/PostPage/PostPage.tsx","routes/PostRoute.tsx","components/ui/Container/Container.tsx","components/ProtectedComponent/ProtectedComponent.tsx","components/BadgeContainer/BadgeContainer.tsx","components/ViewsContainer/ViewsContainer.tsx","hooks/useRatePost.ts","components/PostCard/PostCard.tsx","components/Post/Post.tsx","components/ui/TextArea/TextArea.tsx"],"sourcesContent":["import { ReactElement } from \"react\";\r\nimport \"./style.scss\";\r\n\r\ntype TTagBadgeProps = {\r\n  children: string;\r\n  slug: string;\r\n  disabled?: boolean\r\n  action: (slug: string) => void;\r\n  tagStore: string[]\r\n};\r\n\r\nexport const TagBadge = ({\r\n  children,\r\n  slug,\r\n  action,\r\n  disabled = false, \r\n  tagStore\r\n}: TTagBadgeProps): ReactElement => {\r\n  return (\r\n    <button\r\n      className={tagStore.includes(slug) ? \"tag-badge__active\" : \"tag-badge\"}\r\n      disabled={disabled}\r\n      onClick={() => {\r\n        action(slug);\r\n      }}\r\n    >\r\n      <p>{children}</p>\r\n    </button>\r\n  );\r\n};\r\n","import { TComment, TPostAppStore } from \"@/types/types\";\r\nimport { ReactElement } from \"react\";\r\nimport { faThumbsUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Button } from \"@ui/Button\";\r\nimport { Container } from \"@ui/Container\";\r\nimport useFetch from \"@hooks/useFetch\";\r\nimport { useRateComment } from \"@/hooks/useRateComment\";\r\nimport \"./style.scss\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport const CommentCard: React.FC<{ comment: TComment }> = ({\r\n  comment,\r\n}): ReactElement => {\r\n  const { patch } = useFetch(`https://dummyjson.com`);\r\n  const { commentState, rateComment } = useRateComment({ comment, patch });\r\n  const { id } = useSelector((state: TPostAppStore) => state.user.data);\r\n  return (\r\n    <div className=\"comment-card\">\r\n      <div className=\"comment-card__header\">\r\n        <Container>\r\n          <img\r\n            src={`https://dummyjson.com/icon/${commentState.user.username}/128`}\r\n            alt={commentState.user.fullName + \" avatar\"}\r\n          />\r\n          <h5>{commentState.user.fullName}</h5>\r\n        </Container>\r\n      </div>\r\n      <div className=\"comment-card__body\">\r\n        <p>{commentState.body}</p>\r\n      </div>\r\n      <div className=\"comment-card__footer\">\r\n        <Container>\r\n          <Button\r\n            icon={faThumbsUp}\r\n            action={rateComment}\r\n            disabled={comment.user.id === id}\r\n            isAuthOnly={true}\r\n            payload={\"\"}\r\n            style={{color: 'blue'}}\r\n          >\r\n            {commentState.likes}\r\n          </Button>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { TComment } from \"@/types/types\";\r\nimport { useState, useCallback } from \"react\";\r\n\r\ninterface UseCommentPostProps {\r\n  comment: TComment;\r\n  patch: <T>(endpoint: string, data: any) => Promise<T | undefined>;\r\n}\r\n\r\nexport const useRateComment = ({ comment, patch }: UseCommentPostProps) => {\r\n  const [commentState, setCommentState] = useState(comment);\r\n  const rateCommentAsync = useCallback(async () => {\r\n    const newLikes = commentState.liked\r\n      ? commentState.likes - 1\r\n      : commentState.likes + 1;\r\n    const newLiked = !commentState.liked;\r\n    setCommentState({\r\n      ...commentState,\r\n      likes: newLikes,\r\n      liked: newLiked,\r\n    });\r\n    try {\r\n      const ratedComment = await patch<TComment>(`comments/${comment.id}`, {\r\n        likes: newLikes,\r\n      });\r\n      if (\r\n        ratedComment &&\r\n        (ratedComment.likes !== newLikes || ratedComment.liked !== newLiked)\r\n      ) {\r\n      }\r\n    } catch (error) {\r\n      setCommentState(commentState);\r\n      console.log(error);\r\n    }\r\n  }, [comment.id, commentState, patch]);\r\n\r\n  return { commentState, rateComment: rateCommentAsync };\r\n};\r\n","import { ReactElement, useState } from \"react\";\r\nimport { Button } from \"@ui/Button\";\r\nimport { faCommentDots } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { TextArea } from \"@ui/TextArea\";\r\nimport { useLocation } from \"react-router\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { TComment, TPostAppStore } from \"@/types/types\";\r\nimport { AppDispatch } from \"@/store\";\r\nimport { addComment } from \"@/store/slices/PostsSlices\";\r\nimport useFetch from \"@/hooks/useFetch\";\r\n\r\nexport const CommentInput = (): ReactElement => {\r\n  const [commentText, setCommentText] = useState(\"\");\r\n  const { pathname } = useLocation();\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const { post } = useFetch(`https://dummyjson.com`);\r\n  const { id, username, firstName, lastName } = useSelector(\r\n    (state: TPostAppStore) => state.user.data\r\n  );\r\n  const postId = Number(pathname.split(\"/\").at(-1));\r\n  const sendComment = async () => {\r\n    const newComment: TComment = {\r\n      id: Math.floor(Math.random() * 20001) + 10000,\r\n      body: commentText,\r\n      postId,\r\n      likes: 0,\r\n      user: {\r\n        id,\r\n        fullName: firstName + \" \" + lastName,\r\n        username,\r\n      },\r\n    };\r\n    dispatch(addComment(newComment));\r\n    await post('comments/add', newComment)\r\n  };\r\n  return (\r\n    <div>\r\n      <img\r\n        src={`https://dummyjson.com/icon/${username}/50`}\r\n        alt={firstName + \" \" + lastName + \" avatar\"}\r\n      />\r\n      <TextArea label=\"Comment text:\" value={commentText} setValue={setCommentText} />\r\n      <Button action={sendComment} payload={commentText} icon={faCommentDots} style={{color:'black'}} />\r\n    </div>\r\n  );\r\n};\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { ReactElement, useEffect } from \"react\";\r\nimport { TComment, TPostAppStore } from \"@/types/types\";\r\nimport { CommentCard } from \"@/components/CommentCard\";\r\nimport { CommentInput } from \"@components/CommentInput\";\r\nimport { ProtectedComponent } from \"@components/ProtectedComponent\";\r\nimport { fetchPostComments } from \"@/store/posts.api\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch } from \"@/store\";\r\n\r\nexport const Comments: React.FC<{ postId: number }> = ({\r\n  postId,\r\n}): ReactElement => {\r\n  const { data } = useSelector((state : TPostAppStore) => state.posts.comments)\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  useEffect(() => {\r\n    dispatch(fetchPostComments(postId))\r\n  }, [postId]);\r\n  return (\r\n    <div>\r\n      <ProtectedComponent>\r\n        <CommentInput />\r\n      </ProtectedComponent>\r\n      {data.map((comment : TComment) => (\r\n        <CommentCard key={comment.id} comment={comment} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { ReactElement, useEffect, useRef } from \"react\";\r\nimport { useLocation } from \"react-router\";\r\nimport { fetchPostById } from \"@/store/posts.api\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppDispatch } from \"@/store\";\r\nimport { TPostAppStore } from \"@/types/types\";\r\nimport { Post } from \"@components/Post\";\r\nimport { Comments } from \"@components/Comments\";\r\nimport \"./style.scss\";\r\n\r\nexport const PostPage = (): ReactElement | null => {\r\n  const { pathname } = useLocation();\r\n  const postId = Number(pathname.split(\"/\").at(-1));\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const { data, loading } = useSelector(\r\n    (store: TPostAppStore) => store.posts.post\r\n  );\r\n  const ref = useRef(false);\r\n  useEffect(() => {\r\n    if (ref.current) {\r\n      dispatch(fetchPostById(postId));\r\n    } else {\r\n      ref.current = true;\r\n    }\r\n  }, [dispatch, postId]);\r\n  if (loading === \"succeeded\") {\r\n    return (\r\n      <div className=\"post-page\">\r\n        <Post post={data!} />\r\n        <Comments postId={postId} />\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import { PostPage } from \"@/components/PostPage\";\r\nimport { AppDispatch } from \"@/store\";\r\nimport { fetchPostById } from \"@/store/posts.api\";\r\nimport { ReactElement, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useLocation } from \"react-router\";\r\n\r\nconst PostRoute = (): ReactElement => {\r\n  const { pathname } = useLocation();\r\n  const id = Number(pathname.split(\"/\").at(-1));\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  useEffect(() => {\r\n    if (typeof id !== \"number\") {\r\n      dispatch(fetchPostById(id));\r\n    }\r\n  }, [id, dispatch]);\r\n  return (\r\n    <main>\r\n      <PostPage />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default PostRoute","import { PropsWithChildren, ReactElement } from \"react\";\r\n\r\nexport const Container = ({ children }: PropsWithChildren): ReactElement => {\r\n  return <div className=\"container\">{children}</div>;\r\n};\r\n","import { useCheckToken } from \"@/hooks/useCheckToken\";\r\nimport { PropsWithChildren, ReactElement } from \"react\";\r\n\r\nexport const ProtectedComponent = ({\r\n  children,\r\n}: PropsWithChildren): ReactElement => {\r\n  const { isLogged } = useCheckToken();\r\n  if (isLogged) {\r\n    return <>{children}</>;\r\n  } else {\r\n    return <div></div>;\r\n  }\r\n};\r\n","import { ReactElement } from \"react\";\r\nimport { TagBadge } from \"@ui/TagBadge\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AppDispatch } from \"@/store\";\r\nimport { fetchPostsByTag } from \"@/store/posts.api\";\r\nimport \"./style.scss\";\r\n\r\ntype TBadgeContainerProps = {\r\n  tags: string[];\r\n  tagsStore: string[];\r\n};\r\n\r\nexport const BadgeContainer: React.FC<TBadgeContainerProps> = ({\r\n  tags,\r\n  tagsStore,\r\n}): ReactElement => {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const sortByTag = (slug: string) => {\r\n    dispatch(fetchPostsByTag(slug));\r\n  };\r\n  return (\r\n    <div className=\"badge-container\">\r\n      {tags.map((tag, index) => (\r\n        <TagBadge key={index} slug={tag} action={sortByTag} tagStore={tagsStore}>\r\n          {tag}\r\n        </TagBadge>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { faEye } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ReactElement } from \"react\";\r\nimport \"./style.scss\";\r\n\r\ntype TViewsContainer = {\r\n  views: number;\r\n};\r\n\r\nexport const ViewsContainer: React.FC<TViewsContainer> = ({\r\n  views,\r\n}): ReactElement => {\r\n  return (\r\n    <div className=\"view-container\">\r\n      <div className=\"view-container__icon\">\r\n        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>\r\n      </div>\r\n      <div className=\"view-container__counter\">\r\n        <p>{views}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { getUpdatedPost } from \"@/store/posts.api\";\r\nimport { ratePost, ratePagedPost } from \"@/store/slices/PostsSlices\";\r\nimport { TPost } from \"@/types/types\";\r\nimport { useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\ninterface UseRatePostProps {\r\n  post: TPost;\r\n  getPost: <T>(endpoint: string) => Promise<T | undefined>;\r\n  patchPost: <T>(endpoint: string, data: any) => Promise<T | undefined>;\r\n}\r\n\r\nexport const useRatePost = ({ post, getPost, patchPost }: UseRatePostProps) => {\r\n  const dispatch = useDispatch();\r\n  const ratePostAsync = useCallback(\r\n    async (newRate: string | object) => {\r\n      const { rated, rate } = post;\r\n      const updatingPost = await getPost<TPost>(`posts/${post.id}`);\r\n      const basePostData = {\r\n        ...updatingPost,\r\n        user: post.user,\r\n        postImage: post.postImage\r\n      };\r\n      const updatePostReactions = async () => {\r\n        const updatedPost = getUpdatedPost(post.id);\r\n        await patchPost<TPost>(`posts/${post.id}`, {\r\n          reactions: updatedPost?.reactions,\r\n        });\r\n      };\r\n      if (rated && rate === newRate) {\r\n        dispatch(ratePost({ post: basePostData }));\r\n        await updatePostReactions();\r\n      } else if (rated && rate !== newRate) {\r\n        dispatch(\r\n          ratePost({\r\n            post: basePostData,\r\n            reaction: newRate,\r\n          })\r\n        );\r\n        await updatePostReactions();\r\n      } else {\r\n        dispatch(\r\n          ratePost({\r\n            post: basePostData,\r\n            reaction: newRate,\r\n          })\r\n        );\r\n        await updatePostReactions();\r\n      }\r\n    },\r\n    [post, dispatch, getPost, patchPost]\r\n  );\r\n\r\n  const ratePagedPostAsync = useCallback(\r\n    async (newRate: string | object) => {\r\n      const { rated, rate } = post;\r\n      const updatingPost = await getPost<TPost>(`posts/${post.id}`);\r\n      const basePostData = {\r\n        ...updatingPost,\r\n        user: post.user,\r\n        postImage: post.postImage\r\n      };\r\n      const updatePostReactions = async () => {\r\n        const updatedPost = getUpdatedPost(post.id);\r\n        await patchPost<TPost>(`posts/${post.id}`, {\r\n          reactions: updatedPost?.reactions,\r\n        });\r\n      };\r\n      if (rated && rate === newRate) {\r\n        dispatch(ratePagedPost({ post: basePostData }));\r\n        await updatePostReactions();\r\n      } else if (rated && rate !== newRate) {\r\n        dispatch(\r\n          ratePagedPost({\r\n            post: basePostData,\r\n            reaction: newRate,\r\n          })\r\n        );\r\n        await updatePostReactions();\r\n      } else {\r\n        dispatch(\r\n          ratePagedPost({\r\n            post: basePostData,\r\n            reaction: newRate,\r\n          })\r\n        );\r\n        await updatePostReactions();\r\n      }\r\n    },\r\n    [post, dispatch, getPost, patchPost]\r\n  );\r\n  return { ratePost: ratePostAsync, ratePagedPost: ratePagedPostAsync };\r\n};\r\n","import { TPost, TPostAppStore} from \"@/types/types\";\r\nimport { ReactElement } from \"react\";\r\nimport { BadgeContainer } from \"@/components/BadgeContainer\";\r\nimport { NavLink, useLocation } from \"react-router\";\r\nimport { Container } from \"@ui/Container\";\r\nimport { faThumbsUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faThumbsDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Button } from \"@ui/Button\";\r\nimport { ViewsContainer } from \"../ViewsContainer\";\r\nimport useFetch from \"@/hooks/useFetch\";\r\nimport { useRatePost } from \"@/hooks/useRatePost\";\r\nimport \"./style.scss\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\ntype TPostCardProps = {\r\n  link: string;\r\n  post: TPost;\r\n};\r\n\r\nexport const PostCard: React.FC<TPostCardProps> = ({\r\n  link,\r\n  post,\r\n}): ReactElement => {\r\n  const { pathname } = useLocation();\r\n  const postId = Number(pathname.split(\"/\").at(-1));\r\n  const { get, patch } = useFetch(`https://dummyjson.com`);\r\n  const { tag } = useSelector((state: TPostAppStore) => state.posts);\r\n  const { id : userId } = useSelector(\r\n    (state: TPostAppStore) => state.user.data\r\n  );\r\n  const { ratePost, ratePagedPost } = useRatePost({\r\n    post,\r\n    getPost: get,\r\n    patchPost: patch,\r\n  });\r\n  const ratePostAsync = async (newRate: string | object) => {\r\n    if (newRate === \"liked\") {\r\n      await ratePost(\"liked\");\r\n    } else {\r\n      await ratePost(\"disliked\");\r\n    }\r\n  };\r\n  const ratePagedPostAsync = async (newRate: string | object) => {\r\n    if (newRate === \"liked\") {\r\n      await ratePagedPost(\"liked\");\r\n    } else {\r\n      await ratePagedPost(\"disliked\");\r\n    }\r\n  };\r\n  return (\r\n    <article className=\"post-card\">\r\n      <div className=\"post-card__header\">\r\n        {post.user ? (\r\n          <Container>\r\n            <img\r\n              src={post.user.image}\r\n              alt={post.user.firstName + \" \" + post.user.lastName + \" avatar\"}\r\n            />\r\n            <h5>{post.user.firstName + \" \" + post.user.lastName}</h5>\r\n          </Container>\r\n        ) : <div></div>}\r\n        <BadgeContainer tags={post.tags} tagsStore={tag} />\r\n      </div>\r\n      <div className=\"post-card__body\">\r\n        <h2>{post.title}</h2>\r\n\r\n        {postId ? (\r\n          <img src={post.postImage} alt={post.title} />\r\n        ) : (\r\n          <NavLink to={link}>\r\n            <img src={post.postImage} alt={post.title} />\r\n          </NavLink>\r\n        )}\r\n        {postId ? <p>{post.body}</p> : <NavLink to={link}>{post.body}</NavLink>}\r\n      </div>\r\n      <div className=\"post-card__footer\">\r\n        <ViewsContainer views={post.views} />\r\n        <Container>\r\n          <Button\r\n            icon={faThumbsUp}\r\n            action={!postId ? ratePostAsync : ratePagedPostAsync}\r\n            payload={\"liked\"}\r\n            isAuthOnly={true}\r\n            disabled={post.userId === userId}\r\n            style={{color:'blue'}}\r\n          >\r\n            {post.reactions.likes}\r\n          </Button>\r\n          <Button\r\n            icon={faThumbsDown}\r\n            action={!postId ? ratePostAsync : ratePagedPostAsync}\r\n            payload={\"disliked\"}\r\n            isAuthOnly={true}\r\n            disabled={post.userId === userId}\r\n            style={{color:'red'}}\r\n          >\r\n            {post.reactions.dislikes}\r\n          </Button>\r\n        </Container>\r\n      </div>\r\n    </article>\r\n  );\r\n};\r\n","import { TPost } from \"@/types/types\";\r\nimport { ReactElement } from \"react\";\r\nimport { useLocation } from \"react-router\";\r\nimport { PostCard } from \"@components/PostCard\";\r\n\r\ninterface IPostsListProps {\r\n  post: TPost;\r\n}\r\n\r\nexport const Post: React.FC<IPostsListProps> = ({ post }): ReactElement => {\r\n  const location = useLocation();\r\n  return <PostCard link={`${location.pathname}/${post.id}`} post={post} />;\r\n};\r\n","import { ReactElement, useState, useEffect } from \"react\";\r\nimport \"./style.scss\";\r\n\r\ntype TTextAreaProps = {\r\n  value: string | number;\r\n  label?: string;\r\n  setValue: (value: string) => void;\r\n  required?: boolean;\r\n  rows?: number;\r\n};\r\n\r\nexport const TextArea: React.FC<TTextAreaProps> = ({\r\n  value,\r\n  setValue,\r\n  label,\r\n  required = false,\r\n  rows = 4,\r\n}: TTextAreaProps): ReactElement => {\r\n  const [isFocused, setIsFocused] = useState(false);\r\n  const [hasValue, setHasValue] = useState(!!value);\r\n\r\n  useEffect(() => {\r\n    setHasValue(!!value);\r\n  }, [value]);\r\n\r\n  return (\r\n    <div className={`textarea-container ${isFocused ? \"focused\" : \"\"} ${hasValue ? \"has-value\" : \"\"}`}>\r\n      {label && (\r\n        <label \r\n          className={`textarea-label ${isFocused || hasValue ? \"label-up\" : \"\"}`}\r\n        >\r\n          {label}\r\n          {required && <span className=\"required-star\">*</span>}\r\n        </label>\r\n      )}\r\n      <textarea\r\n        value={value}\r\n        onChange={(e) => setValue(e.target.value)}\r\n        onFocus={() => setIsFocused(true)}\r\n        onBlur={() => setIsFocused(false)}\r\n        className=\"styled-textarea\"\r\n        rows={rows}\r\n      />\r\n      <div className=\"textarea-underline\">\r\n        <div className={`underline-animation ${isFocused ? \"active\" : \"\"}`}></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};"],"names":["TagBadge","_ref","children","slug","action","disabled","tagStore","_jsx","className","includes","onClick","CommentCard","comment","patch","useFetch","commentState","rateComment","setCommentState","useState","rateCommentAsync","useCallback","async","newLikes","liked","likes","newLiked","ratedComment","id","error","console","log","useRateComment","useSelector","state","user","data","_jsxs","Container","src","username","alt","fullName","body","Button","icon","faThumbsUp","isAuthOnly","payload","style","color","CommentInput","commentText","setCommentText","pathname","useLocation","dispatch","useDispatch","post","firstName","lastName","postId","Number","split","at","TextArea","label","value","setValue","newComment","Math","floor","random","addComment","faCommentDots","Comments","posts","comments","useEffect","fetchPostComments","ProtectedComponent","map","PostPage","loading","store","ref","useRef","current","fetchPostById","Post","PostRoute","isLogged","useCheckToken","_Fragment","BadgeContainer","tags","tagsStore","sortByTag","fetchPostsByTag","tag","index","ViewsContainer","views","FontAwesomeIcon","faEye","PostCard","link","get","userId","ratePost","ratePagedPost","getPost","patchPost","rated","rate","basePostData","postImage","updatePostReactions","updatedPost","getUpdatedPost","reactions","newRate","reaction","useRatePost","ratePostAsync","ratePagedPostAsync","image","title","NavLink","to","faThumbsDown","dislikes","location","required","rows","isFocused","setIsFocused","hasValue","setHasValue","onChange","e","target","onFocus","onBlur"],"sourceRoot":""}